@startuml overview

class Robot {
    - size: Size
    - type: Type
    - processingTime: int
    - loc: std::string
    - x: int
    - y: int
    + getSize(): Size
    + getType(): Type
    + getTime(): int
    + getLoc(): std::string
    + fixTime(): int
    + getX(): int
    + getY(): int
}

class Room {
    - name: std::string
    - size: RoomSize
    + getName(): std::string
    + getSize(): RoomSize
}

enum RoomSize {
  Small 
  Medium
  Large 
}

enum Type {
  Sweeper
  Vacuum
  Mop
}

enum Size {
  Small
  Large
}

class UserInterface {
}

class RobotManagementSystem {
  - robots: std::unordered_map<int, Robot>
  - busyRobot: std::unordered_map<int, bool>
  - brokenRobot: std::unordered_map<int, bool>
  - roomDictionary: std::unordered_map<std::string, RoomSize>
  + requestCleaning(RoomSize, Type): int
  + simulation(): void
  + updateRobotLocation(int x_,int y_,int x,int y,int time,int step): std::pair<int,int>
  + add_busyRobot(): void
  + addRobot(): void
  + addRoom(): void
}

UserInterface --> RobotManagementSystem: uses
RobotManagementSystem *-- Robot
RobotManagementSystem *-- Room
Room --> RoomSize
Robot --> Type
Robot --> Size
@enduml